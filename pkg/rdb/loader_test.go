package rdb

import (
	"bytes"
	"context"
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"io/ioutil"
	"os"
	"strconv"
	"strings"
	"testing"
	"time"

	"github.com/redis/go-redis/v9"
	"github.com/stretchr/testify/suite"
)

func TestStringSuite(t *testing.T) {
	suite.Run(t, new(stringTestSuite))
}

func TestListSuite(t *testing.T) {
	suite.Run(t, new(listTestSuite))
}

func TestSetSuite(t *testing.T) {
	suite.Run(t, new(setTestSuite))
}

func TestHashSuite(t *testing.T) {
	suite.Run(t, new(hashTestSuite))
}

func TestZsetSuite(t *testing.T) {
	suite.Run(t, new(zsetTestSuite))
}

func TestStreamSuite(t *testing.T) {
	suite.Run(t, new(streamTestSuite))
}

func TestFlagsSuite(t *testing.T) {
	suite.Run(t, new(flagTestSuite))
}

func TestFunctionSuite(t *testing.T) {
	suite.Run(t, new(functionTestSuite))
}

type baseSuite struct {
	suite.Suite
	rdbDumpData  string
	redisVersion string
	redisClis    map[string]*redis.Client // version -> client
	redisDirs    map[string]string        // version -> redis database dir
	redisCfg     map[string]struct {
		ip   string
		port int
		dir  string
	}
}

func (bs *baseSuite) getLoader(s string) *Loader {
	p, err := hex.DecodeString(strings.NewReplacer("\t", "", "\r", "", "\n", "", " ", "").Replace(s))
	bs.Nil(err)
	r := bytes.NewReader(p)
	l := NewLoader(r, WithTargetRedisVersion("7"))
	bs.Nil(l.Header())
	return l
}

func (bs *baseSuite) decodeHexRdb(s string, n int) map[string]*BinEntry {
	l := bs.getLoader(s)
	return bs.getBins(l, n)
}

func (bs *baseSuite) getBins(l *Loader, n int) map[string]*BinEntry {
	entries := make(map[string]*BinEntry)
	var i int = 0
	for {
		e, err := l.Next()
		bs.Nil(err)
		if e == nil {
			break
		}
		entries[string(e.Key)] = e
		i++
	}
	bs.Nil(l.Footer())
	return entries
}

func (bs *baseSuite) dir() string {
	return bs.redisDirs[bs.redisVersion]
}
func (bs *baseSuite) cli() *redis.Client {
	return bs.redisClis[bs.redisVersion]
}

func (bs *baseSuite) newCli() *redis.Client {
	cg := bs.redisCfg[bs.redisVersion]
	cli := redis.NewClient(&redis.Options{
		Addr: fmt.Sprintf("%s:%d", cg.ip, cg.port),
	})
	return cli
}

func (bs *baseSuite) fileRdbToHex() string {
	file, err := os.Open(fmt.Sprintf("%s/dump.rdb", bs.dir()))
	bs.Nil(err)
	defer file.Close()
	content, err := ioutil.ReadAll(file)
	bs.Nil(err)
	return hex.EncodeToString(content)
}

func (bs *baseSuite) SetupTest() {
	if bs.cli() != nil {
		bs.cli().FlushAll(context.Background())
	}
}

func (bs *baseSuite) SetupSubTest() {
	if bs.cli() != nil {
		bs.cli().FlushAll(context.Background())
	}
}

func (bs *baseSuite) SetupSuite() {
	bs.redisClis = make(map[string]*redis.Client)
	bs.redisDirs = make(map[string]string)
	bs.redisCfg = map[string]struct { // @TODO docker run redis-server
		ip   string
		port int
		dir  string
	}{
		// "4.0": {"127.0.0.1", 6400, "/home/ken/redis/redis4"},
		// "5.0": {"127.0.0.1", 6500, "/home/ken/redis/redis5"},
		// "7.2": {"127.0.0.1", 6700, "/home/ken/redis/data4/r1"},
		// "7.0": {"127.0.0.1", 6701, "/home/ken/redis/data4/r2"},
	}

	for k, v := range bs.redisCfg {
		cli := redis.NewClient(&redis.Options{
			Addr: fmt.Sprintf("%s:%d", v.ip, v.port),
		})
		bs.redisClis[k] = cli
		bs.redisDirs[k] = v.dir
		cli.FlushAll(context.Background())
	}
	bs.redisVersion = "7.2"
}

func (bs *baseSuite) sets(keyPrefix string, valSlice []interface{}) {
	if bs.cli() == nil {
		return
	}
	for _, v := range valSlice {
		bs.cli().Set(context.Background(), fmt.Sprintf("%s%v", keyPrefix, v), v, 0)
	}
}

func (bs *baseSuite) rpushs(key string, valSlice []interface{}) {
	if bs.cli() == nil {
		return
	}
	for _, v := range valSlice {
		bs.cli().RPush(context.Background(), key, v)
	}
}

func (bs *baseSuite) entryToMap(entry *BinEntry) map[string]string {
	vv := make(map[string]string, 0)
	entry.ObjectParser.ExecCmd(func(cmd string, args ...interface{}) error {
		var v string
		if len(args) == 3 {
			v = fmt.Sprintf("%s", args[2])
		}
		vv[fmt.Sprintf("%s", args[1])] = v
		return nil
	})
	return vv
}

func (bs *baseSuite) genIntList(n int) (list []interface{}) {
	for i := 0; i < n; i++ {
		list = append(list, i)
	}
	return
}

func (bs *baseSuite) genStrList(n int) (list []interface{}) {
	for i := 0; i < n; i++ {
		list = append(list, fmt.Sprintf("a_%d", i))
	}
	return
}

func (bs *baseSuite) saveRdb() {
	if bs.cli() == nil {
		return
	}
	bs.cli().Save(context.Background())
	bs.rdbDumpData = bs.fileRdbToHex()
}

type stringTestSuite struct {
	baseSuite
}

func (sts *stringTestSuite) TestIntString() {
	sts.rdbDumpData = `524544495330303130fa0972656469732d76657205372e302e31fa0a72656469732d62697473c040fa056374696d65c22af27f65fa08757365642d6d656dc2b0360f00fa08616f662d62617365c000fe00fb0a000008737472696e675f31c001000a737472696e675f323536c10001000c737472696e675f3635353335c2ffff00000011737472696e675f32313437343833363437c2ffffff7f000c737472696e675f3635353336c2000001000012737472696e675f2d32313437343833363438c2000000800011737472696e675f343239343936373239360a343239343936373239360011737472696e675f323134373438333634380a32313437343833363438000a737472696e675f323535c1ff000011737472696e675f343239343936373239350a34323934393637323935ffc88d76323391b084`
	keyPrefix := "string_"
	ints := []interface{}{1, 255, 256, 65535, 65536, 2147483647, 2147483648, 4294967295, 4294967296, -2147483648}
	sts.sets(keyPrefix, ints)
	sts.saveRdb()

	entries := sts.decodeHexRdb(sts.rdbDumpData, len(ints))
	for _, value := range ints {
		key := fmt.Sprintf("string_%d", value)
		val, ok := entries[key]
		sts.True(ok)
		sts.Equal(fmt.Sprintf("%d", value.(int)), string(val.Value()))
	}
}

func (sts *stringTestSuite) TestStringTTL() {
	hexData := `524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c29af1fb65fa08757365642d6d656dc2c83f2700fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c2d18a3c30fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0101fc304829608e010000000a737472696e675f74746c0a737472696e675f74746cff4660ae91416e7077`
	key := "string_ttl"

	var expireTime int64
	ctx := context.Background()
	if sts.cli() != nil {
		expireAt := time.Now().Add(100 * time.Second)
		sts.cli().Set(ctx, key, key, 0)
		sts.cli().ExpireAt(ctx, key, expireAt)
		sts.cli().Save(ctx)
		hexData = sts.fileRdbToHex()
		expireTime = expireAt.Unix() * 1000
	} else {
		expireTime = 1711010302000
	}

	entries := sts.decodeHexRdb(hexData, 1)
	bin := entries[key]
	sts.Equal(0, bin.DB)
	sts.Equal(key, string(bin.Value()))

	sts.Equal(uint64(expireTime), bin.ExpireAt)
}

// list

type listTestSuite struct {
	baseSuite
}

func (ls *listTestSuite) TestZiplist() {

}

func (ls *listTestSuite) TestList() {

}

func (ls *listTestSuite) TestQuicklist2() {
	ls.redisVersion = "7.2"
	hexDataInt := []string{
		`524544495330303130fa0972656469732d76657205372e302e31fa0a72656469732d62697473c040fa056374696d65c203478065fa08757365642d6d656dc260e71400fa08616f662d62617365c000fe00fb010012056c697374690102090900000001000001ffffda5e570c517b806b`,
		`524544495330303130fa0972656469732d76657205372e302e31fa0a72656469732d62697473c040fa056374696d65c218478065fa08757365642d6d656dc230ac1400fa08616f662d62617365c000fe00fb010012056c69737469010240d1d100000065000001000101010201030104
		01050106010701080109010a010b010c010d010e010f0110011101120113011401150116011701180119011a011b011c011d011e011f0120012101220123012401250126012701280129012a012b012c012d012e012f0130013101320133013401350136013701380139013a013b013c0
		13d013e013f0140014101420143014401450146014701480149014a014b014c014d014e014f0150015101520153015401550156015701580159015a015b015c015d015e015f016001610162016301ffff7794e10a7ef3f528`,
	}
	hexDataStr := []string{
		`524544495330303130fa0972656469732d76657205372e302e31fa0a72656469732d62697473c040fa056374696d65c269478065fa08757365642d6d656dc260e71400fa08616f662d62617365c000fe00fb010012056c6973746901020c0c000000010083615f3004ffff80ae595c19a5cd31`,
		`524544495330303130fa0972656469732d76657205372e302e31fa0a72656469732d62697473c040fa056374696d65c286478065fa08757365642d6d656dc2d0ad1400fa08616f662d62617365c000fe00fb010012056c697374690102c3419e425a0a5a020000650083615f3004c004003140
		090032400400334004003440040035400400364004003740040038400402390484202c01300540050031600500326005003360050034600500356005003660050037600500386005003940050032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603
		b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b003560
		3b0035603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b00386
		03b0038603b0038603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b03393905ffffcc0d658b908bd065`,
	}
	sizes := []int{1, 100}
	for i := 0; i < len(sizes); i++ {
		ls.quicklist(hexDataInt[i], ls.genIntList(sizes[i]), RdbTypeQuicklist2)
		ls.quicklist(hexDataStr[i], ls.genStrList(sizes[i]), RdbTypeQuicklist2)
	}
}

func (ls *listTestSuite) quicklist(hexData string, vals []interface{}, rdbType int) {
	ls.Run("x", func() {
		key := "listi"
		ls.rdbDumpData = hexData
		ls.rpushs(key, vals)
		ls.saveRdb()

		entries := ls.decodeHexRdb(ls.rdbDumpData, 1)
		entry := entries[key]
		ls.Equal(rdbType, entry.ObjectParser.RdbType())
		kvs := ls.entryToMap(entry)
		ls.Equal(len(vals), len(kvs))

		for _, val := range vals {
			var ok bool
			switch tt := val.(type) {
			case string:
				_, ok = kvs[tt]
			case int:
				_, ok = kvs[strconv.Itoa(tt)]
			}
			ls.True(ok)
		}
	})
}

func (ls *listTestSuite) TestQuicklist() {
	ls.redisVersion = "4.0"
	hexDataInt := []string{
		`524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2e2488065fa08757365642d6d656dc241810d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000e056c69737469010d0d0000000a000000010000f1ffff1efa62312ff54d69`,
		`524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2b34c8065fa08757365642d6d656dc214c60d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000e056c6973746901412a2a01000026010000640000f102f202f302f402f502
		f602f702f802f902fa02fb02fc02fd02fe0d03fe0e03fe0f03fe1003fe1103fe1203fe1303fe1403fe1503fe1603fe1703fe1803fe1903fe1a03fe1b03fe1c03fe1d03fe1e03fe1f03fe2003fe2103fe2203fe2303fe2403fe2503fe2603fe2703fe2803fe2903fe2a03fe2b03fe2c03fe2d03fe2e03fe2f03fe3003fe3103fe3203fe3303fe3403fe3503fe3603fe3703fe3803fe3903fe3a03fe3b03fe3c03fe3d03fe3e03fe3f03fe4003fe4103fe4203fe4303fe4403f
		e4503fe4603fe4703fe4803fe4903fe4a03fe4b03fe4c03fe4d03fe4e03fe4f03fe5003fe5103fe5203fe5303fe5403fe5503fe5603fe5703fe5803fe5903fe5a03fe5b03fe5c03fe5d03fe5e03fe5f03fe6003fe6103fe6203fe63ffffbe77a491904f0d56`,
	}
	hexDataStr := []string{
		`524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2a14c8065fa08757365642d6d656dc2fac40d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000e056c697374690110100000000a00000001000003615f30ffff36029e35f65c5b8a`,
		`524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2d24c8065fa08757365642d6d656dc243c70d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000e056c6973746901c341a2425904590200005220030764000003615f300520040031
		40040032400400334004003440040035400400364004003740040038400402390504202c01300640050031600500326005003360050034600500356005003660050037600500386005003940050032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b00346
		03b0034603b0034603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0039603b0039603b0039603b0039603b0039
		603b0039603b0039603b0039603b0039603b023939ffff184f4bd1d14e53ed`,
	}
	sizes := []int{1, 100}
	for i := 0; i < len(sizes); i++ {
		ls.quicklist(hexDataInt[i], ls.genIntList(sizes[i]), RdbTypeQuicklist)
		ls.quicklist(hexDataStr[i], ls.genStrList(sizes[i]), RdbTypeQuicklist)
	}
}

// set

type setTestSuite struct {
	baseSuite
}

func (ts *setTestSuite) TestRdb8() { // redis 4.0+
	return
	ts.redisVersion = "4.0"
	expData := "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c29602fc65fa08757365642d6d656dc2b0090e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000b0c746573745f7365745f6b657940d0020000006400000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f0020002100220023002400250026002700280029002a002b002c002d002e002f0030003100320033003400350036003700380039003a003b003c003d003e003f0040004100420043004400450046004700480049004a004b004c004d004e004f0050005100520053005400550056005700580059005a005b005c005d005e005f006000610062006300ff9086674503d95617"
	ts.set(expData, ts.genIntList(100), RdbTypeSetIntset)
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2b402fc65fa08757365642d6d656dc23e210e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100020c746573745f7365745f6b6579406404615f353504615f333704615f333304615f313403615f3804615f313704615f323504615f313804615f343404615f323104615f353904615f373704615f333204615f323704615f313604615f333504615f373204615f313004615f323904615f343704615f393604615f313103615f3204615f373304615f333804615f333104615f333604615f323804615f343104615f393104615f363404615f353404615f323003615f3504615f373504615f363604615f383004615f373604615f383704615f373004615f393803615f3704615f353104615f363503615f3403615f3904615f383104615f333004615f373904615f333404615f313204615f373404615f343203615f3304615f313304615f323204615f333904615f353004615f373804615f323304615f363704615f383804615f363204615f363804615f353204615f393504615f343304615f343604615f363304615f373104615f393304615f323604615f343804615f343904615f343504615f323404615f383404615f363103615f3604615f313904615f393904615f353304615f353704615f383304615f363904615f393204615f383904615f343003615f3004615f313504615f353604615f353804615f393703615f3104615f363004615f393004615f383204615f393404615f383504615f3836ff7c7a10ebae96d707"
	ts.set(expData, ts.genStrList(100), RdbTypeSet)
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2d702fc65fa08757365642d6d656dc2e80a0e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000b0c746573745f7365745f6b65794208020000000001000000000100020003000400050006000700080009000a000b000c000d000e000f0010001100120013001400150016001700180019001a001b001c001d001e001f0020002100220023002400250026002700280029002a002b002c002d002e002f0030003100320033003400350036003700380039003a003b003c003d003e003f0040004100420043004400450046004700480049004a004b004c004d004e004f0050005100520053005400550056005700580059005a005b005c005d005e005f0060006100620063006400650066006700680069006a006b006c006d006e006f0070007100720073007400750076007700780079007a007b007c007d007e007f0080008100820083008400850086008700880089008a008b008c008d008e008f0090009100920093009400950096009700980099009a009b009c009d009e009f00a000a100a200a300a400a500a600a700a800a900aa00ab00ac00ad00ae00af00b000b100b200b300b400b500b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c200c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d100d200d300d400d500d600d700d800d900da00db00dc00dd00de00df00e000e100e200e300e400e500e600e700e800e900ea00eb00ec00ed00ee00ef00f000f100f200f300f400f500f600f700f800f900fa00fb00fc00fd00fe00ff00ffd19946081d594171"
	ts.set(expData, ts.genIntList(256), RdbTypeSetIntset)
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2f202fc65fa08757365642d6d656dc2da3f0e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100020c746573745f7365745f6b6579410005615f32343105615f32303805615f31353204615f373705615f32343604615f333205615f32343305615f32333005615f32303204615f323905615f31363705615f31313705615f31383105615f31353905615f31313604615f313104615f393605615f31313305615f31333803615f3205615f32353104615f333105615f31373305615f31363904615f393104615f353405615f32323304615f373504615f323005615f31323504615f373604615f383005615f32313105615f31373704615f383705615f32323104615f373005615f31323005615f32323404615f353105615f31373905615f32353305615f32303303615f3405615f31393804615f383103615f3904615f373904615f333404615f373404615f313205615f32333803615f3304615f333704615f333305615f32333205615f31303405615f31323305615f31333004615f313305615f31343704615f333905615f31383404615f373805615f31303904615f323305615f31303105615f32323804615f383805615f31363805615f31363005615f32313205615f32333705615f32303004615f363805615f31353304615f353204615f343605615f31383504615f363305615f31393204615f373105615f32313804615f343804615f323604615f393305615f31353005615f31353605615f31323705615f32303504615f323405615f32313504615f363104615f313905615f31393105615f32303605615f32303705615f31323905615f31373204615f383305615f32333305615f31323105615f32323604615f343005615f31343503615f3005615f31313405615f32343205615f32323504615f353603615f3104615f393005615f32333905615f31313105615f32333105615f31353504615f353505615f31313205615f31373805615f32343905615f31383805615f32313705615f31383205615f32313304615f383505615f31373104615f343405615f31343204615f323104615f353905615f32343504615f313604615f323704615f333504615f373205615f32323905615f31373404615f313005615f32303905615f31393604615f343705615f31383905615f31393505615f31333305615f31323405615f31333204615f373304615f333805615f31373604615f323804615f333605615f32353404615f343105615f31333904615f363405615f31363205615f31343905615f31343005615f32333405615f31393005615f31363504615f363603615f3505615f31303205615f31333605615f31393305615f32343004615f393805615f32343405615f32313005615f32353505615f31373503615f3705615f31303605615f31353804615f363505615f32303105615f32343805615f31353105615f31363604615f333004615f343205615f32333605615f31393704615f313403615f3805615f31313905615f31383305615f31313005615f31323204615f313805615f32343705615f32313405615f32313904615f323205615f32323704615f353005615f31333105615f31383004615f363705615f31303705615f32323205615f31373005615f31363105615f31383604615f363205615f31323805615f32313605615f32303404615f343304615f393505615f31343604615f343905615f31313805615f31333705615f31343305615f31333505615f31313504615f343505615f32333505615f32353004615f383405615f31303005615f31333403615f3605615f31323605615f31343105615f32323005615f31363405615f31353704615f353304615f393905615f31343805615f31393404615f353704615f363905615f31363304615f383904615f393205615f31303505615f31353405615f31383704615f353804615f313504615f363004615f393705615f31393905615f31303805615f31343405615f32353204615f383204615f313704615f393404615f323504615f383605615f313033ff15de2e97d8704e37"
	ts.set(expData, ts.genStrList(256), RdbTypeSet)
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c20a03fc65fa08757365642d6d656dc207830e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100020c746573745f7365745f6b65794201c1a800c16401c12901c19a01c19401c12b01c1f801c053c1ad00c02ac057c1ac00c17901c1d300c060c12301c1dd00c1e001c010c1b101c1c400c015c19001c1f601c10f01c19000c04ac19201c17701c1c800c06dc01ac19f00c01cc04dc11b01c17f01c1d700c19701c013c012c1fb00c1d701c17e01c1b301c10e01c1c701c15701c19801c07cc072c1a400c10c01c10a01c03ec038c16f01c11801c00dc001c11301c1b700c1ca00c18f00c13e01c034c17d01c11a01c15101c06ec1b701c18400c1aa01c1de00c030c1ee00c12701c1ee01c11e01c1f100c12501c019c17101c14d01c18401c1ba01c18201c15501c1e601c06fc078c039c021c00ec1ba00c1a600c15c01c1ed00c040c1b401c16201c1c301c1f000c1a500c14001c04ec11c01c11901c1ab01c1f001c17c01c18c01c14201c1cb00c14901c1a300c1a201c1db01c16e01c18800c1ff01c1d901c1d001c11201c19300c17301c1e401c025c10701c017c1f301c12801c032c02ec12c01c042c16b01c036c1e201c13301c1a101c066c18e00c1a100c19e01c17501c1f300c19600c1e600c1c801c18900c077c1e701c17801c10001c1e400c10801c19e00c19b00c1fc01c18c00c14701c14a01c1da01c1ae00c1c201c12d01c13f01c008c065c079c11001c1a000c16501c1f800c12e01c19d00c1fe01c19c01c10002c18b00c11101c1ef00c1ea01c11f01c11601c18500c19200c10301c1b200c016c1f400c1eb01c1b100c01fc050c12401c024c1cc01c028c1b801c03dc18901c10b01c18100c16801c11d01c10d01c17b01c1bd01c07ac18a01c003c04bc1f101c10901c1a001c07dc1fb01c14301c043c06bc062c058c18b01c15601c1ab00c1be01c16901c14501c1fa00c13501c10401c1a701c1aa00c1ec01c13901c15f01c10601c1de01c1c900c048c1cd01c1dc01c18e01c037c01ec1f201c1d100c19601c00fc1cf01c13101c1e100c18000c044c16701c15401c1fe00c16d01c1be00c07ec04cc1c600c13d01c1d000c073c1bb01c16c01c13401c035c18801c056c16101c15901c1e800c1b300c13a01c13001c1d401c1cd00c18301c022c17401c00cc1ca01c1a301c19700c1d800c1e101c12f01c1ac01c18001c1bf01c075c1da00c1dc00c070c15a01c1ff00c07bc18d00c004c17a01c05dc1fd00c10501c1c300c10101c027c19b01c13201c00bc19d01c1ae01c1e900c05bc045c14b01c1f200c1e000c16001c19f01c1d301c1d801c18701c18700c1bd00c16a01c18a00c1f701c1bc00c051c19400c01dc18101c068c1f401c1c001c14c01c1e301c1c101c15301c1d600c17001c1c100c1e801c18300c17201c069c1c401c1d200c18f01c1fa01c1a501c19500c14601c007c1f700c03fc1d601c1a601c13801c1f900c1f501c1a401c1b201c13601c009c1c500c049c1e501c1dd01c02fc13c01c1c000c046c1f901c1bb00c1a900c1bf00c1fd01c011c1c200c1b500c1a200c1c901c19901c063c1e300c17601c1c501c1d900c05ec13701c018c1b600c000c06ac18200c05fc1b601c1a700c12001c19c00c061c15b01c1d201c1eb00c19100c1b400c059c1df01c1d101c1af01c03cc10201c02dc15801c12a01c1a801c1d400c031c02bc16601c16301c055c1fc00c18601c11501c1d501c05cc14f01c11701c1b501c18600c06cc19301c1e200c071c1ce01c033c1d500c026c02cc14401c15d01c029c15001c1b800c1cb01c1b900c1b001c19900c052c15e01c12201c1f600c1ef01c1cc00c19101c03bc054c014c002c15201c14e01c1ea00c1df00c1e901c01bc1f500c1cf00c1e700c1bc01c12601c064c00ac067c03ac1af00c05ac1c601c1ec00c1ce00c19a00c04fc18d01c1c700c14801c12101c006c19800c076c18501c005c1b901c020c1ed01c023c1e500c047c041c14101c1b000c074c13b01c1a901c1db00c19501c11401c1ad01c07fff447ebaf8bcee04b0"
	ts.set(expData, ts.genIntList(513), RdbTypeSet) // > 512, convert to set
}

func (ts *setTestSuite) TestRdb11() { // redis 7.2+
	ts.redisVersion = "7.2"
	expData := "524544495330303131fa0972656469732d76657205372e322e30fa0a72656469732d62697473c040fa056374696d65c2e403fc65fa08757365642d6d656dc218ea1500fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100140c746573745f7365745f6b65790c0c000000010083615f3004ffffcc02d368839e44bb"
	ts.set(expData, ts.genStrList(1), RdbTypeSetListpack)
	expData = "524544495330303131fa0972656469732d76657205372e322e30fa0a72656469732d62697473c040fa056374696d65c20104fc65fa08757365642d6d656dc218b11500fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100140c746573745f7365745f6b6579c3419e42550a55020000640083615f30042004003140040032400400334004003440040035400400364004003740040038400402390484202c01300540050031600500326005003360050034600500356005003660050037600500386005003940050032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0032603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0033603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0034603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0035603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0036603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0037603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0038603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b0039603b03393905ffff052af6f884da0f5e"
	ts.set(expData, ts.genStrList(100), RdbTypeSetListpack) // <= 128
	expData = "524544495330303131fa0972656469732d76657205372e322e30fa0a72656469732d62697473c040fa056374696d65c21104fc65fa08757365642d6d656dc2a0c51500fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100020c746573745f7365745f6b6579408105615f31303103615f3204615f393304615f313504615f323304615f343205615f31303905615f31323004615f313804615f353604615f383605615f31323703615f3003615f3604615f333504615f353204615f393004615f383504615f363305615f31303304615f333704615f393205615f31323404615f353404615f343404615f363904615f363803615f3504615f383404615f333404615f313004615f373405615f31313704615f373204615f343904615f353004615f383805615f31303805615f31323605615f31313904615f323405615f31303005615f31313604615f313105615f31313204615f343704615f333204615f313705615f31313304615f313304615f393605615f31303704615f313204615f323604615f393904615f343304615f333005615f31323205615f31313504615f353704615f363104615f353804615f343004615f343104615f313603615f3104615f323804615f373104615f383904615f383703615f3404615f353104615f373804615f353904615f313404615f373504615f343804615f333904615f383105615f31323504615f393704615f343505615f31303404615f333305615f31303604615f363204615f323105615f31313405615f31303204615f343604615f373905615f31313805615f31303504615f323003615f3905615f31313104615f373304615f353303615f3704615f383004615f323905615f31313004615f363005615f31323104615f333804615f323704615f373004615f393803615f3303615f3805615f31323304615f393504615f363604615f393104615f363504615f383304615f383204615f373604615f333604615f313904615f393404615f373704615f353504615f333104615f363704615f363405615f31323804615f323204615f3235ff44ae8cf522e95150"
	ts.set(expData, ts.genStrList(129), RdbTypeSet) // <= 512
}

func (ts *setTestSuite) set(hexData string, vals []interface{}, rdbType int) {
	ts.Run("set", func() {
		key := "test_set_key"
		ts.rdbDumpData = hexData
		if ts.cli() != nil {
			for _, val := range vals {
				ts.cli().SAdd(context.Background(), key, val)
			}
			ts.saveRdb()
		}

		entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
		entry := entries[key]
		if rdbType == RdbTypeSetListpack && entry.ObjectParser.RdbType() == RdbTypeSet {
			fmt.Println("")
		}
		ts.Equal(rdbType, entry.ObjectParser.RdbType())
		kvs := ts.entryToMap(entry)
		ts.Equal(len(vals), len(kvs))
		for _, val := range vals {
			var ok bool
			switch tt := val.(type) {
			case string:
				_, ok = kvs[tt]
			case int:
				_, ok = kvs[strconv.Itoa(tt)]
			}
			ts.True(ok)
		}
	})
}

// hash

type hashTestSuite struct {
	baseSuite
}

func (ts *hashTestSuite) TestHashRdb11() {
	//redis7.2(rdb 11) :
	// if (sdslen(field)>64 || sdslen(value) > 64), RdbTypeHash; else RdbTypeHashListpack
	ts.redisVersion = "7.2"

	longStrs := []interface{}{}
	for i := 0; i < 2; i++ {
		longStrs = append(longStrs, fmt.Sprintf("524544495330303038fa0972656469732d76657205342e302e30fa02e30fa0fa%d", i))
	}

	expData := "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c22fe9fb65fa08757365642d6d656dc2681f2700fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c2efdc222ffa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100040d746573745f686173685f6b657902c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009ffa9ada0fb51d11ae4"
	ts.hash(expData, longStrs, RdbTypeHash)
	expData = "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c242e9fb65fa08757365642d6d656dc2f8e22600fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c2d1dd222ffa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100100d746573745f686173685f6b6579c3222f0a2f000000080083615f3004c00400314009600400324009600400334009023304ffffe13db8f73554e4ea"
	ts.hash(expData, ts.genStrList(4), RdbTypeHashListpack)
	expData = "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c256e9fb65fa08757365642d6d656dc2b8e92600fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c207f9222ffa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100100d746573745f686173685f6b6579c34262462b0a2b060000000183615f3004c00400314009600400324009600400334009600400344009600400354009600400364009600400374009600400384009600400394009023904842054013005e001050031600b80050032600b80050033600b80050034600b80050035600b80050036600b80050037600b80050038600b80050039600b600500326077a0056071a0056071a0056071a0056071a0056071a0056071a0056071a0056071a0058071600500336077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500346077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500356077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500366077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500376077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500386077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071600500396077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0056077a0058071023905854437013006e003060031800da0060032800da0060033800da0060034800da0060035800da0060036800da0060037800da0060038800da0060039800d80060031808bc0068084c0068084c0068084c0068084c0068084c0068084c0068084c0068084c006a08480060032808bc006808bc006808bc006808bc006808bc006808bc006808bc006808b200600ffffe1c10552154b4791"
	ts.hash(expData, ts.genStrList(128), RdbTypeHashListpack)
}

func (ts *hashTestSuite) TestHashRdb11HashMaxBinEntry() {
	ts.redisVersion = "5.0"
	oldValue := maxBinEntryBuffer
	defer func() { maxBinEntryBuffer = oldValue }()
	maxBinEntryBuffer = 100
	vals := []interface{}{}
	for i := 0; i < 4; i++ {
		vals = append(vals, fmt.Sprintf("524544495330303038fa0972656469732d76657205342e302e30fa02e30fa0fa%d", i))
	}

	key := "test_hash_key"
	if ts.cli() != nil {
		ts.rdbDumpData = ""
		for _, val := range vals {
			ts.cli().HSet(context.Background(), key, val, val)
		}
		ts.saveRdb()
	} else {
		ts.rdbDumpData = "524544495330303039fa0972656469732d76657206352e302e3134fa0a72656469732d62697473c040fa056374696d65c298e9fb65fa08757365642d6d656dc2782f0e00fa0c616f662d707265616d626c65c000fe00fb0100040d746573745f686173685f6b657904c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666133c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666133c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666132c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666132ffdd174bdc01b0aec7"
	}

	loader := ts.getLoader(ts.rdbDumpData)
	//entries := ts.getBins(loader, 100)
	kvs := make(map[string]string, 0)
	expFirstBin := true
	for i := 0; i < 400; i++ {
		e1, err := loader.Next()
		if e1 == nil {
			break
		}
		if string(e1.Key) != key {
			continue
		}
		ts.Nil(err)

		firstBin := e1.FirstBin()
		ts.Equal(expFirstBin, firstBin)
		expFirstBin = false

		ts.Equal(RdbTypeHash, e1.ObjectParser.RdbType())
		kvs1 := ts.entryToMap(e1)
		ts.Equal(len(vals), (len(kvs1)+len(kvs1))*2)
		for k, v := range kvs1 {
			kvs[k] = v
		}
	}

	for _, val := range vals {
		var ok bool
		switch tt := val.(type) {
		case string:
			_, ok = kvs[tt]
		case int:
			_, ok = kvs[strconv.Itoa(tt)]
		}
		ts.True(ok)
	}
}

func (ts *hashTestSuite) TestHashRdb8() {

	// redis4.0(rdb 8) : if (ziplistLen(ziplist) < 512) then RdbTypeHashZiplist; else RdbTypeHash,
	ts.redisVersion = "4.0"
	expData := "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2f0e9fb65fa08757365642d6d656dc276c50d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000d0d746573745f686173685f6b6579c3263304330000002d20030708000003615f3005c004003140096004003240096004003340090133ffff358ae9dae08224c0"
	ts.hash(expData, ts.genStrList(4), RdbTypeHashZiplist)

	longStrs := []interface{}{}
	for i := 0; i < 2; i++ {
		longStrs = append(longStrs, fmt.Sprintf("524544495330303038fa0972656469732d76657205342e302e30fa02e30fa0fa%d", i))
	}
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c29eecfb65fa08757365642d6d656dc2a1830d00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100040d746573745f686173685f6b657902c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33940410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a00602666131c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009c33740410b35323435343434393533333060011e3866613039373236353634363937333264373636353732303533343265333040032021a0062009ff26e94e4859fb2df8"
	ts.hash(expData, longStrs, RdbTypeHash)
}

func (ts *hashTestSuite) TestHincrby() {
	ts.redisVersion = "4.0"
	// hincrby k2 f1 44467
	ts.rdbDumpData = "524544495330303038fa0972656469732d76657205342e302e38fa0a72656469732d62697473c040fa056374696d65c201ab3667fa08757365642d6d656dc2083f6b14fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642862663430326136396562316334373461626231613732633335333335616266316434323561303564fa0b7265706c2d6f6666736574c2a7631c00fa0c616f662d707265616d626c65c000fe00fb01000d026b3214140000000e00000002000002663104f0b3ad00ffff0000000000000000"
	entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
	entry := entries["k2"]
	ts.Equal(RdbTypeHashZiplist, entry.ObjectParser.RdbType())
	kvs := ts.entryToMap(entry)
	ts.Equal(1, len(kvs))
	ts.Equal(kvs["f1"], "44467")
}

func (ts *hashTestSuite) hash(hexData string, vals []interface{}, rdbType int) {
	ts.Run("hash", func() {
		key := "test_hash_key"
		ts.rdbDumpData = hexData
		if ts.cli() != nil {
			for _, val := range vals {
				ts.cli().HSet(context.Background(), key, val, val)
			}
			ts.saveRdb()
		}

		entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
		entry := entries[key]
		ts.Equal(rdbType, entry.ObjectParser.RdbType())
		kvs := ts.entryToMap(entry)
		ts.Equal(len(vals), len(kvs))
		for _, val := range vals {
			var ok bool
			switch tt := val.(type) {
			case string:
				_, ok = kvs[tt]
			case int:
				_, ok = kvs[strconv.Itoa(tt)]
			}
			ts.True(ok)
		}
	})
}

// zset

type zsetTestSuite struct {
	baseSuite
}

func (ts *zsetTestSuite) TestZsetRdb8() {
	// redis4.0(rdb8) : ziplist_entries <= 128 then ziplist; else zset2(skiplist)
	ts.redisVersion = "4.0"
	expData := "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c2edecfb65fa08757365642d6d656dc208090e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb01000c0d746573745f7a7365745f6b657927270000002400000008000003615f3005f10203615f3105f20203615f3205f30203615f3305f4ffffecf8fcd4eaf26d03"
	ts.zset(expData, ts.scores(4), RdbTypeZSetZiplist)
	expData = "524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c209edfb65fa08757365642d6d656dc2e4060e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100050d746573745f7a7365745f6b6579408105615f313238000000000000604005615f3132370000000000c05f4005615f3132360000000000805f4005615f3132350000000000405f4005615f3132340000000000005f4005615f3132330000000000c05e4005615f3132320000000000805e4005615f3132310000000000405e4005615f3132300000000000005e4005615f3131390000000000c05d4005615f3131380000000000805d4005615f3131370000000000405d4005615f3131360000000000005d4005615f3131350000000000c05c4005615f3131340000000000805c4005615f3131330000000000405c4005615f3131320000000000005c4005615f3131310000000000c05b4005615f3131300000000000805b4005615f3130390000000000405b4005615f3130380000000000005b4005615f3130370000000000c05a4005615f3130360000000000805a4005615f3130350000000000405a4005615f3130340000000000005a4005615f3130330000000000c0594005615f313032000000000080594005615f313031000000000040594005615f313030000000000000594004615f39390000000000c0584004615f3938000000000080584004615f3937000000000040584004615f3936000000000000584004615f39350000000000c0574004615f3934000000000080574004615f3933000000000040574004615f3932000000000000574004615f39310000000000c0564004615f3930000000000080564004615f3839000000000040564004615f3838000000000000564004615f38370000000000c0554004615f3836000000000080554004615f3835000000000040554004615f3834000000000000554004615f38330000000000c0544004615f3832000000000080544004615f3831000000000040544004615f3830000000000000544004615f37390000000000c0534004615f3738000000000080534004615f3737000000000040534004615f3736000000000000534004615f37350000000000c0524004615f3734000000000080524004615f3733000000000040524004615f3732000000000000524004615f37310000000000c0514004615f3730000000000080514004615f3639000000000040514004615f3638000000000000514004615f36370000000000c0504004615f3636000000000080504004615f3635000000000040504004615f3634000000000000504004615f36330000000000804f4004615f36320000000000004f4004615f36310000000000804e4004615f36300000000000004e4004615f35390000000000804d4004615f35380000000000004d4004615f35370000000000804c4004615f35360000000000004c4004615f35350000000000804b4004615f35340000000000004b4004615f35330000000000804a4004615f35320000000000004a4004615f3531000000000080494004615f3530000000000000494004615f3439000000000080484004615f3438000000000000484004615f3437000000000080474004615f3436000000000000474004615f3435000000000080464004615f3434000000000000464004615f3433000000000080454004615f3432000000000000454004615f3431000000000080444004615f3430000000000000444004615f3339000000000080434004615f3338000000000000434004615f3337000000000080424004615f3336000000000000424004615f3335000000000080414004615f3334000000000000414004615f3333000000000080404004615f3332000000000000404004615f33310000000000003f4004615f33300000000000003e4004615f32390000000000003d4004615f32380000000000003c4004615f32370000000000003b4004615f32360000000000003a4004615f3235000000000000394004615f3234000000000000384004615f3233000000000000374004615f3232000000000000364004615f3231000000000000354004615f3230000000000000344004615f3139000000000000334004615f3138000000000000324004615f3137000000000000314004615f3136000000000000304004615f31350000000000002e4004615f31340000000000002c4004615f31330000000000002a4004615f3132000000000000284004615f3131000000000000264004615f3130000000000000244003615f39000000000000224003615f38000000000000204003615f370000000000001c4003615f36000000000000184003615f35000000000000144003615f34000000000000104003615f33000000000000084003615f32000000000000004003615f31000000000000f03f03615f300000000000000000fff52762388548ac40"
	ts.zset(expData, ts.scores(129), RdbTypeZSet2)
}

func (ts *zsetTestSuite) TestZsetRdb11() {
	// redis7.2(rdb11) : entries <= 128 then listpack; else zset2
	ts.redisVersion = "7.2"
	expData := "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c250edfb65fa08757365642d6d656dc258d32700fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c2bbc9c82ffa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100110d746573745f7a7365745f6b65792323000000080083615f3004000183615f3104010183615f3204020183615f33040301ffffe929aca906853161"
	ts.zset(expData, ts.scores(4), RdbTypeZSetListpack)
	expData = "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c274edfb65fa08757365642d6d656dc248402700fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c22aa3d52ffa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb0100050d746573745f7a7365745f6b6579408105615f313238000000000000604005615f3132370000000000c05f4005615f3132360000000000805f4005615f3132350000000000405f4005615f3132340000000000005f4005615f3132330000000000c05e4005615f3132320000000000805e4005615f3132310000000000405e4005615f3132300000000000005e4005615f3131390000000000c05d4005615f3131380000000000805d4005615f3131370000000000405d4005615f3131360000000000005d4005615f3131350000000000c05c4005615f3131340000000000805c4005615f3131330000000000405c4005615f3131320000000000005c4005615f3131310000000000c05b4005615f3131300000000000805b4005615f3130390000000000405b4005615f3130380000000000005b4005615f3130370000000000c05a4005615f3130360000000000805a4005615f3130350000000000405a4005615f3130340000000000005a4005615f3130330000000000c0594005615f313032000000000080594005615f313031000000000040594005615f313030000000000000594004615f39390000000000c0584004615f3938000000000080584004615f3937000000000040584004615f3936000000000000584004615f39350000000000c0574004615f3934000000000080574004615f3933000000000040574004615f3932000000000000574004615f39310000000000c0564004615f3930000000000080564004615f3839000000000040564004615f3838000000000000564004615f38370000000000c0554004615f3836000000000080554004615f3835000000000040554004615f3834000000000000554004615f38330000000000c0544004615f3832000000000080544004615f3831000000000040544004615f3830000000000000544004615f37390000000000c0534004615f3738000000000080534004615f3737000000000040534004615f3736000000000000534004615f37350000000000c0524004615f3734000000000080524004615f3733000000000040524004615f3732000000000000524004615f37310000000000c0514004615f3730000000000080514004615f3639000000000040514004615f3638000000000000514004615f36370000000000c0504004615f3636000000000080504004615f3635000000000040504004615f3634000000000000504004615f36330000000000804f4004615f36320000000000004f4004615f36310000000000804e4004615f36300000000000004e4004615f35390000000000804d4004615f35380000000000004d4004615f35370000000000804c4004615f35360000000000004c4004615f35350000000000804b4004615f35340000000000004b4004615f35330000000000804a4004615f35320000000000004a4004615f3531000000000080494004615f3530000000000000494004615f3439000000000080484004615f3438000000000000484004615f3437000000000080474004615f3436000000000000474004615f3435000000000080464004615f3434000000000000464004615f3433000000000080454004615f3432000000000000454004615f3431000000000080444004615f3430000000000000444004615f3339000000000080434004615f3338000000000000434004615f3337000000000080424004615f3336000000000000424004615f3335000000000080414004615f3334000000000000414004615f3333000000000080404004615f3332000000000000404004615f33310000000000003f4004615f33300000000000003e4004615f32390000000000003d4004615f32380000000000003c4004615f32370000000000003b4004615f32360000000000003a4004615f3235000000000000394004615f3234000000000000384004615f3233000000000000374004615f3232000000000000364004615f3231000000000000354004615f3230000000000000344004615f3139000000000000334004615f3138000000000000324004615f3137000000000000314004615f3136000000000000304004615f31350000000000002e4004615f31340000000000002c4004615f31330000000000002a4004615f3132000000000000284004615f3131000000000000264004615f3130000000000000244003615f39000000000000224003615f38000000000000204003615f370000000000001c4003615f36000000000000184003615f35000000000000144003615f34000000000000104003615f33000000000000084003615f32000000000000004003615f31000000000000f03f03615f300000000000000000ffd60f17b154ac036d"
	ts.zset(expData, ts.scores(129), RdbTypeZSet2)
}

func (ts *zsetTestSuite) zset(hexData string, vals []redis.Z, rdbType int) {
	ts.Run("zset", func() {
		key := "test_zset_key"
		ts.rdbDumpData = hexData
		if ts.cli() != nil {
			for _, val := range vals {
				ts.cli().ZAdd(context.Background(), key, val)
			}
			ts.saveRdb()
		}

		entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
		entry := entries[key]
		ts.Equal(rdbType, entry.ObjectParser.RdbType())

		kvs := make(map[float64]string, 0)
		entry.ObjectParser.ExecCmd(func(cmd string, args ...interface{}) error {
			var v string
			if len(args) == 3 {
				v = fmt.Sprintf("%s", args[2])
			}
			switch tv := args[1].(type) {
			case float64:
				kvs[tv] = v
			case []byte:
				f, _ := strconv.ParseFloat(string(tv), 64)
				kvs[f] = v
			}
			return nil
		})

		ts.Equal(len(vals), len(kvs))
		for _, val := range vals {
			mem, ok := kvs[val.Score]
			ts.True(ok)
			ts.Equal(val.Member.(string), mem)
		}
	})
}

func (ts *zsetTestSuite) scores(n int) (zset []redis.Z) {
	for i := 0; i < n; i++ {
		zset = append(zset, redis.Z{
			Score:  float64(i),
			Member: fmt.Sprintf("a_%d", i),
		})
	}
	return
}

// stream

type streamTestSuite struct {
	baseSuite
}

func (ts *streamTestSuite) TestStream() {
	rdbDump5 := "524544495330303039fa0972656469732d76657206352e302e3134fa0a72656469732d62697473c040fa056374696d65c25aeffb65fa08757365642d6d656dc290340e00fa0c616f662d707265616d626c65c000fe00fb02000f036d713201100000018e601efb590000000000000000c34050408d118d0000001b00020100010501846d73673105400500326005003360050134054011033505000140250900018676616c7565310780070032a0070033a0070034a00702350708602f0001e0212f0101ff02810000018e601efb590101056d71326731810000018e601efb5901020000018e601efb5900000000000000005afb1e608e010000010000018e601efb5900000000000000015afb1e608e01000001020263315afb1e608e010000010000018e601efb5900000000000000000263325afb1e608e010000010000018e601efb5900000000000000010f036d713101100000018e601efb590000000000000000c34050408d118d0000001b00020100010501846d73673105400500326005003360050134054011033505000140250900018676616c7565310780070032a0070033a0070034a00702350708602f0001e0212f0101ff02810000018e601efb590101056d71316731810000018e601efb5901010000018e601efb59000000000000000159fb1e608e010000010202633159fb1e608e0100000002633259fb1e608e010000010000018e601efb590000000000000001ff1434a7cb8c5683e8"
	rdbDump7 := "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c29aeffb65fa08757365642d6d656dc270792700fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642864623231353262383333336237356266303164356566623230323663643037383330663830653634fa0b7265706c2d6f6666736574c241f31530fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429fe00fb020013036d713101100000018e601ff43c0000000000000000c34050408d118d0000001b00020100010501846d73673105400500326005003360050134054011033505000140250900018676616c7565310780070032a0070033a0070034a00702350708602f0001e0212f0101ff02810000018e601ff43c01810000018e601ff43c0000000201056d71316731810000018e601ff43c0102010000018e601ff43c00000000000000013ef41f608e01000001020263313df41f608e010000000263323ef41f608e010000010000018e601ff43c000000000000000113036d713201100000018e601ff43d0000000000000000c34050408d118d0000001b00020100010501846d73673105400500326005003360050134054011033505000140250900018676616c7565310780070032a0070033a0070034a00702350708602f0001e0212f0101ff02810000018e601ff43d01810000018e601ff43d0000000201056d71326731810000018e601ff43d0102020000018e601ff43d00000000000000003ef41f608e010000010000018e601ff43d00000000000000013ef41f608e01000001020263313ef41f608e010000010000018e601ff43d00000000000000000263323ef41f608e010000010000018e601ff43d0000000000000001ff1b8748687f4029e5"

	redisVers := []string{"5.0", "7.2"}
	expIds := [][]string{{"1711009626969-0", "1711009626969-1", "1711009626969-0", "1711009626969-1"},
		{"1711009690684-0", "1711009690684-1", "1711009690685-0", "1711009690685-1"}}
	expData := []string{rdbDump5, rdbDump7}
	for i, version := range redisVers {
		ts.redisVersion = version
		data := expData[i]
		ids := expIds[i]
		ts.Run(ts.redisVersion, func() {
			ts.testStream(data, ids)
		})
	}
}

func (ts *streamTestSuite) testStream(data string, expIds []string) {
	stream := "mq1"
	stream2 := "mq2"

	ids := []string{}

	group1 := "g1"
	consumer1 := "c1"
	consumer2 := "c2"

	if ts.cli() != nil {
		ids = append(ids, ts.sendMsg(stream, 1, 5))
		ids = append(ids, ts.sendMsg(stream, 1, 5))

		ids = append(ids, ts.sendMsg(stream2, 1, 5))
		ids = append(ids, ts.sendMsg(stream2, 1, 5))

		ts.createGroup(stream, stream+group1, "0")
		ts.xreadGroup(stream, stream+group1, consumer1, false)
		ts.xreadGroup(stream, stream+group1, consumer2, false)
		ts.ack(stream, stream+group1, ids[0])
		ts.createGroup(stream2, stream2+group1, "0")
		ts.xreadGroup(stream2, stream2+group1, consumer1, false)
		ts.xreadGroup(stream2, stream2+group1, consumer2, false)
		ts.saveRdb()
	} else {
		ts.rdbDumpData = data
		ids = expIds
	}

	entries := ts.decodeHexRdb(ts.rdbDumpData, 1)

	exps := []struct {
		cmd  string
		pos  []int
		vals []interface{}
	}{
		// mq1
		{
			"XADD", []int{0, 1}, []interface{}{(stream), ids[0]},
		},
		{
			"XADD", []int{0, 1}, []interface{}{(stream), ids[1]},
		},
		{
			"XSETID", []int{0, 1}, []interface{}{(stream), ids[1]},
		},
		{
			"XGROUP", []int{1, 2, 3}, []interface{}{(stream), stream + group1, ids[1]},
		},
		{
			"XCLAIM", []int{0, 1, 2, 3, 4}, []interface{}{(stream), stream + group1, consumer2, "0", ids[1]},
		},

		// mq2
		{
			"XADD", []int{0, 1}, []interface{}{(stream2), ids[2]},
		},
		{
			"XADD", []int{0, 1}, []interface{}{(stream2), ids[3]},
		},
		{
			"XSETID", []int{0, 1}, []interface{}{(stream2), ids[3]},
		},
		{
			"XGROUP", []int{1, 2, 3}, []interface{}{(stream2), stream2 + group1, ids[3]},
		},
		{
			"XCLAIM", []int{0, 1, 2, 3, 4}, []interface{}{(stream2), stream2 + group1, consumer1, "0", ids[2]},
		},
		{
			"XCLAIM", []int{0, 1, 2, 3, 4}, []interface{}{(stream2), stream2 + group1, consumer2, "0", ids[3]},
		},
	}

	count := 0
	checkExecCmd := func(cmd string, args ...interface{}) {
		exp := exps[count]
		ts.Equal(exp.cmd, cmd)
		for i := 0; i < len(exp.pos); i++ {
			pos := exp.pos[i]
			switch tt := args[pos].(type) {
			case []byte:
				ts.Equal(exp.vals[i], string(tt))
			default:
				ep := exp.vals[i]
				ts.Equal(ep, tt)
			}
		}
		count++
		//fmt.Printf("%s : %s\n", cmd, args)
		// params := []interface{}{}
		// params = append(params, cmd)
		// params = append(params, args...)
		// replayCli.Do(context.Background(), params...)
	}

	entries[stream].ObjectParser.ExecCmd(func(cmd string, args ...interface{}) error {
		checkExecCmd(cmd, args...)
		return nil
	})
	entries[stream2].ObjectParser.ExecCmd(func(cmd string, args ...interface{}) error {
		checkExecCmd(cmd, args...)
		return nil
	})
}

func (ts *streamTestSuite) xreadGroup(stream, group, consumer string, noack bool) {

	cmd := ts.cli().Do(context.Background(), "XREADGROUP", "GROUP", group, consumer, "COUNT", 1, "STREAMS", stream, ">")
	// cmd := ts.cli().XReadGroup(context.Background(), &redis.XReadGroupArgs{
	// 	Streams:  []string{stream},
	// 	Group:    group,
	// 	Consumer: consumer,
	// 	NoAck:    noack,
	// })
	ts.Nil(cmd.Err())
}

func (ts *streamTestSuite) createGroup(stream, group, start string) {
	ts.cli().XGroupCreate(context.Background(), stream, group, start)
}

func (ts *streamTestSuite) ack(stream, group string, ids ...string) {
	ts.cli().XAck(context.Background(), stream, group, ids...)
}

func (ts *streamTestSuite) sendMsg(stream string, startId int, size int) string {
	vals := []interface{}{}
	for i := 0; i < size; i++ {
		vals = append(vals, fmt.Sprintf("msg%d", startId+i), fmt.Sprintf("value%d", startId+i))
	}
	cmd := ts.cli().XAdd(context.Background(), &redis.XAddArgs{
		Stream: stream,
		ID:     "*",
		Values: vals,
	})
	ts.Nil(cmd.Err())
	return cmd.Val()
}

// flags
type flagTestSuite struct {
	baseSuite
}

func (ts *flagTestSuite) TestExpireFlag() {
	key := "testKeyExpire"
	expire := time.Second * 10
	expireAt := time.Now().Add(expire)

	if ts.cli() != nil {
		for ver := range ts.redisClis {
			ts.redisVersion = ver
			res := ts.cli().Set(context.Background(), key, key, expire)
			ts.Nil(res.Err())
			ts.cli().Save(context.Background())
			ts.rdbDumpData = ts.fileRdbToHex()
		}
	} else {
		ts.rdbDumpData = `524544495330303131fa0972656469732d76657205372e322e30fa0a72656469732d62697473c040fa056374696d65c25a308165fa08757365642d6d656dc2a8922500fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642835396432613532306563396663613134653133313665343339353863613739633362346634323564fa0b7265706c2d6f6666736574c2ac800d00fa08616f662d62617365c000fe00fb0101fc1f09a5808c010000000d746573744b65794578706972650d746573744b6579457870697265ff505936926c53ee60`
		expireAt = time.UnixMilli(1702965348639)
	}
	entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
	entry := entries[key]
	ts.True(entry.ExpireAt >= uint64(expireAt.UnixMilli()))
}

func (ts *flagTestSuite) TestSelectFlag() {
	key1 := "testKeyInDb1"
	key0 := "testKeyInDb0"
	ctx := context.Background()
	if len(ts.redisCfg) > 0 {
		for ver, cfg := range ts.redisCfg {
			cli0 := redis.NewClient(&redis.Options{
				Addr:        fmt.Sprintf("%s:%d", cfg.ip, cfg.port),
				ReadTimeout: 100 * time.Second,
			})
			cli1 := redis.NewClient(&redis.Options{
				Addr:        fmt.Sprintf("%s:%d", cfg.ip, cfg.port),
				ReadTimeout: 100 * time.Second,
				DB:          1,
			})
			cli1.Conn().Select(context.Background(), 1)
			cli0.Set(ctx, key0, key0, 0)
			cli1.Set(ctx, key1, key1, 0)
			cli1.Save(ctx)
			cli0.Close()
			cli1.Close()
			ts.redisVersion = ver
			ts.rdbDumpData = ts.fileRdbToHex()
		}
	} else {
		ts.rdbDumpData = `524544495330303038fa0972656469732d76657205342e302e30fa0a72656469732d62697473c040fa056374696d65c281ce8165fa08757365642d6d656dc2c9880e00fa0c616f662d707265616d626c65c000fa077265706c2d69642834656363356231333432373737346536333539653631393234383939653566363336363863336465fa0b7265706c2d6f6666736574c000fe00fb0100000c746573744b6579496e4462300c746573744b6579496e446230fe01fb0100000c746573744b6579496e4462310c746573744b6579496e446231ff07ad954cd298ba6c`
	}
	entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
	entry0 := entries[key0]
	ts.Equal(0, entry0.DB)
	entry1 := entries[key1]
	ts.Equal(1, entry1.DB)

}

type functionTestSuite struct {
	baseSuite
}

func (ts *functionTestSuite) TestRdb11() {
	//redis7.2(rdb 11) :
	// if (sdslen(field)>64 || sdslen(value) > 64), RdbTypeHash; else RdbTypeHashListpack
	ts.redisVersion = "7.2"
	expectedMD5 := string("cbdcfcdecce621f25d5d3f4489193633")
	ts.rdbDumpData = "524544495330303130fa0972656469732d76657206372e302e3132fa0a72656469732d62697473c040fa056374696d65c2a25af165fa08757365642d6d656dc2c0512d00fa0e7265706c2d73747265616d2d6462c000fa077265706c2d69642836323931316233356438366532613034643265323838366237623337343632323166363832626134fa0b7265706c2d6f6666736574c253e56d18fa08616f662d62617365c000f5c34058405d1f23216c7561206e616d653d6d796c6962200a2072656469732e726567697374650d725f66756e6374696f6e28276d79400b02272c20400660120a6b6579732c2061726773292036037475726e600c075b315d20656e6429ff39752e3719063960"
	entries := ts.decodeHexRdb(ts.rdbDumpData, 1)
	for _, v := range entries {
		if v.ObjectParser.RdbType() == RdbTypeFunction2 {
			v.ObjectParser.ExecCmd(func(cmd string, args ...interface{}) error {
				odata := args[1].([]byte)

				value := md5.Sum(odata[:len(odata)-10])
				md5 := hex.EncodeToString(value[:])
				ts.Equal(expectedMD5, md5)
				return nil
			})
		}
	}
}
